#!/bin/bash

set -e

BACKTITLE="Network Security Assessment Tool"
LOGFILE="/tmp/network_assessment.log"
NETWORK_NAME=""

log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOGFILE"
}

get_network_info() {
    local ip=$(ip route get 8.8.8.8 2>/dev/null | awk '{print $7; exit}')
    local gateway=$(ip route | grep default | awk '{print $3; exit}')
    local dns=$(grep -v '^#' /etc/resolv.conf | grep nameserver | awk '{print $2}' | tr '\n' ' ')

    echo "IP: $ip"
    echo "Gateway: $gateway"
    echo "DNS: $dns"
}

validate_cidr() {
    local cidr="$1"
    if [[ $cidr =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}/[0-9]{1,2}$ ]]; then
        local ip_part="${cidr%/*}"
        local subnet_part="${cidr#*/}"

        IFS='.' read -ra ADDR <<< "$ip_part"
        for i in "${ADDR[@]}"; do
            if [[ $i -lt 0 || $i -gt 255 ]]; then
                return 1
            fi
        done

        if [[ $subnet_part -lt 0 || $subnet_part -gt 32 ]]; then
            return 1
        fi

        return 0
    else
        return 1
    fi
}

validate_ip() {
    local ip="$1"
    if [[ $ip =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
        IFS='.' read -ra ADDR <<< "$ip"
        for i in "${ADDR[@]}"; do
            if [[ $i -lt 0 || $i -gt 255 ]]; then
                return 1
            fi
        done
        return 0
    else
        return 1
    fi
}

validate_network_name() {
    local name="$1"
    # Check for lowercase letters, numbers, and hyphens only (no spaces or special chars)
    if [[ $name =~ ^[a-z0-9-]+$ ]] && [[ ${#name} -ge 3 ]] && [[ ${#name} -le 20 ]]; then
        return 0
    else
        return 1
    fi
}

get_network_name() {
    local network_name=""

    while true; do
        network_name=$(whiptail --title "Network Name" --inputbox "Enter a name for this network scan:\n\nRequirements:\n- 3-20 characters\n- Lowercase letters, numbers, and hyphens only\n- No spaces or special characters\n\nExample: corp-network, lab-env, prod-dmz" 15 60 3>&1 1>&2 2>&3)

        if [[ $? -ne 0 ]]; then
            exit 1
        fi

        # Convert to lowercase
        network_name=$(echo "$network_name" | tr '[:upper:]' '[:lower:]')

        if validate_network_name "$network_name"; then
            echo "$network_name"
            return 0
        else
            whiptail --title "Invalid Network Name" --msgbox "Invalid network name format.\n\nRequirements:\n- 3-20 characters\n- Lowercase letters, numbers, and hyphens only\n- No spaces or special characters\n\nPlease try again." 12 60
        fi
    done
}

show_network_info() {
    local network_info=$(get_network_info)

    if whiptail --title "Network Information" --yesno "Current network configuration:\n\n$network_info\n\nIs this information correct?" 12 60; then
        log_message "User verified network information"
        return 0
    else
        log_message "User rejected network information"
        whiptail --title "Exit" --msgbox "Network information verification failed. Exiting script." 8 50
        exit 1
    fi
}

warn_about_cleanup() {
    if whiptail --title "Warning - Data Deletion" --yesno "WARNING: This script will delete all contents in scans and report directory.\n\nAll existing scan files and data in scans and reports will be permanently removed.\n\nDo you want to continue?" 12 60; then
        log_message "User acknowledged cleanup warning and chose to continue"
        return 0
    else
        log_message "User declined cleanup warning and chose to exit"
        whiptail --title "Exit" --msgbox "Script cancelled by user. No files were deleted." 8 50
        exit 1
    fi
}

cleanup_scans() {
    log_message "Cleaning up /root/scans and /root/report directory"
    rm -rf /root/scans/*
    rm -rf /root/report/*
    mkdir -p /root/scans
    mkdir -p /root/report
}

get_scan_method() {
    if whiptail --title "Scan Method" --yesno "Would you like to conduct a network discovery scan to find live hosts?\n\nSelect 'Yes' for network discovery scan\nSelect 'No' to manually enter IP addresses" 10 60; then
        return 0
    else
        return 1
    fi
}

get_network_range() {
    local cidr_range=""

    while true; do
        cidr_range=$(whiptail --title "Network Range" --inputbox "Enter the network range in CIDR notation:\n\nExample: 10.10.10.0/24" 10 50 3>&1 1>&2 2>&3)

        if [[ $? -ne 0 ]]; then
            exit 1
        fi

        if validate_cidr "$cidr_range"; then
            echo "$cidr_range"
            return 0
        else
            whiptail --title "Invalid Format" --msgbox "Invalid CIDR format. Please try again.\n\nExample: 10.10.10.0/24" 8 50
        fi
    done
}

collect_ip_addresses() {
    local ip_list=""
    local ip_address=""

    while true; do
        ip_address=$(whiptail --title "IP Address Entry" --inputbox "Enter an IP address (leave blank and press Enter when done):" 8 50 3>&1 1>&2 2>&3)

        if [[ $? -ne 0 ]]; then
            exit 1
        fi

        if [[ -z "$ip_address" ]]; then
            break
        fi

        if validate_ip "$ip_address"; then
            ip_list="$ip_list$ip_address\n"
        else
            whiptail --title "Invalid IP" --msgbox "Invalid IP address format. Please try again." 8 50
        fi
    done

    echo -e "$ip_list" | grep -v '^$' > /root/scans/nmap-${NETWORK_NAME}-live-hosts.txt
}

run_discovery_scan() {
    local network_range="$1"

    whiptail --title "Discovery Scan" --msgbox "Discovery scan will start after you press Enter.\nThis may take 15-25 minutes (includes nmap and netdiscover scans)." 8 50

    log_message "Starting discovery scan for range: $network_range"

    clear
    echo "Running nmap discovery scan on $network_range..."
    echo "This may take 10-20 minutes..."

    nmap -sn -PR -PS21,22,23,25,110,143,80,445,139,8081,389,636,8080,443,3389,5985 -PU53,123,161,137,5353,1900 --max-retries 3 --host-timeout 60s -T2 "$network_range" -oG /root/scans/nmap-${NETWORK_NAME}-discovery.gnmap

    awk '/Up$/{print $2}' /root/scans/nmap-${NETWORK_NAME}-discovery.gnmap > /root/scans/nmap-${NETWORK_NAME}-live-hosts.txt

    log_message "Nmap discovery scan completed"

    echo "Running netdiscover scan (5 minutes)..."
    log_message "Starting netdiscover scan"

    cd /root/scans
    timeout 300 netdiscover -P -N > /root/scans/nmap-${NETWORK_NAME}-netdiscover.raw 2>/dev/null || true

    if [[ -f /root/scans/nmap-${NETWORK_NAME}-netdiscover.raw ]]; then
        awk '{print $1}' /root/scans/nmap-${NETWORK_NAME}-netdiscover.raw | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$' > /root/scans/nmap-${NETWORK_NAME}-netdiscover-hosts.txt

        if [[ -s /root/scans/nmap-${NETWORK_NAME}-netdiscover-hosts.txt ]]; then
            cat /root/scans/nmap-${NETWORK_NAME}-live-hosts.txt /root/scans/nmap-${NETWORK_NAME}-netdiscover-hosts.txt | sort -u > /root/scans/nmap-${NETWORK_NAME}-merged-hosts.txt
            mv /root/scans/nmap-${NETWORK_NAME}-merged-hosts.txt /root/scans/nmap-${NETWORK_NAME}-live-hosts.txt
            log_message "Netdiscover results merged with nmap results"
        else
            log_message "No valid IPs found in netdiscover output"
        fi
    else
        log_message "Netdiscover output file not created"
    fi

    log_message "Discovery scan completed"

    # Show discovered hosts immediately after scan
    show_discovery_results
}

show_discovery_results() {
    local host_list=$(cat /root/scans/nmap-${NETWORK_NAME}-live-hosts.txt 2>/dev/null || echo "")
    local host_count=$(wc -l < /root/scans/nmap-${NETWORK_NAME}-live-hosts.txt 2>/dev/null || echo "0")

    log_message "Displaying discovery results: $host_count hosts found"

    if [[ $host_count -eq 0 ]]; then
        whiptail --title "Discovery Complete - No Hosts Found" --msgbox "Discovery scan completed but no live hosts were found.\n\nThis could mean:\n- The network range has no active hosts\n- Hosts are not responding to ping/discovery probes\n- Network connectivity issues\n\nYou can manually add IP addresses in the next step." 12 70
    else
        whiptail --title "Discovery Complete - $host_count Hosts Found" --msgbox "Discovery scan completed successfully!\n\nFound $host_count live hosts:\n\n$host_list\n\nYou will be able to modify this list in the next step if needed." 20 70 --scrolltext
    fi
}

modify_host_list() {
    while true; do
        local host_list=$(cat /root/scans/nmap-${NETWORK_NAME}-live-hosts.txt)
        local host_count=$(wc -l < /root/scans/nmap-${NETWORK_NAME}-live-hosts.txt)

        if [[ $host_count -eq 0 ]]; then
            whiptail --title "No Hosts" --msgbox "No hosts in the list. Please add at least one host." 8 50
            continue
        fi

        local choice=$(whiptail --title "Modify Host List ($host_count hosts)" --menu "Current hosts:\n\n$host_list\n\nChoose an action:" 20 70 4 \
            "1" "Add IP address" \
            "2" "Remove IP address" \
            "3" "Continue with current list" \
            "4" "Exit script" 3>&1 1>&2 2>&3)

        case $choice in
            1)
                local new_ip=$(whiptail --title "Add IP Address" --inputbox "Enter IP address to add:" 8 50 3>&1 1>&2 2>&3)
                if [[ $? -eq 0 && -n "$new_ip" ]]; then
                    if validate_ip "$new_ip"; then
                        if ! grep -q "^$new_ip$" /root/scans/nmap-${NETWORK_NAME}-live-hosts.txt; then
                            echo "$new_ip" >> /root/scans/nmap-${NETWORK_NAME}-live-hosts.txt
                            log_message "User added IP: $new_ip"
                            whiptail --title "Success" --msgbox "IP address $new_ip added to the list." 8 50
                        else
                            whiptail --title "Duplicate" --msgbox "IP address $new_ip is already in the list." 8 50
                        fi
                    else
                        whiptail --title "Invalid IP" --msgbox "Invalid IP address format. Please try again." 8 50
                    fi
                fi
                ;;
            2)
                if [[ $host_count -eq 1 ]]; then
                    whiptail --title "Cannot Remove" --msgbox "Cannot remove the last IP address. At least one host is required." 8 50
                    continue
                fi

                local ip_to_remove=$(whiptail --title "Remove IP Address" --inputbox "Enter IP address to remove:" 8 50 3>&1 1>&2 2>&3)
                if [[ $? -eq 0 && -n "$ip_to_remove" ]]; then
                    if grep -q "^$ip_to_remove$" /root/scans/nmap-${NETWORK_NAME}-live-hosts.txt; then
                        grep -v "^$ip_to_remove$" /root/scans/nmap-${NETWORK_NAME}-live-hosts.txt > /root/scans/nmap-${NETWORK_NAME}-live-hosts.tmp
                        mv /root/scans/nmap-${NETWORK_NAME}-live-hosts.tmp /root/scans/nmap-${NETWORK_NAME}-live-hosts.txt
                        log_message "User removed IP: $ip_to_remove"
                        whiptail --title "Success" --msgbox "IP address $ip_to_remove removed from the list." 8 50
                    else
                        whiptail --title "Not Found" --msgbox "IP address $ip_to_remove not found in the list." 8 50
                    fi
                fi
                ;;
            3)
                log_message "User confirmed modified host list"
                return 0
                ;;
            4)
                log_message "User chose to exit from host modification"
                whiptail --title "Exit" --msgbox "Exiting script." 8 50
                exit 1
                ;;
            *)
                whiptail --title "Exit" --msgbox "Exiting script." 8 50
                exit 1
                ;;
        esac
    done
}

display_and_confirm_hosts() {
    local host_list=$(cat /root/scans/nmap-${NETWORK_NAME}-live-hosts.txt)
    local host_count=$(wc -l < /root/scans/nmap-${NETWORK_NAME}-live-hosts.txt)

    if [[ $host_count -eq 0 ]]; then
        whiptail --title "No Hosts Found" --msgbox "No live hosts were found.\n\nYou can manually add IP addresses using the modification option." 8 60
        # Force user to add at least one host
        modify_host_list
        return
    fi

    # Always show the current host list first
    whiptail --title "Current Host List - $host_count Hosts" --msgbox "Current hosts that will be scanned:\n\n$host_list\n\nPress OK to continue..." 20 70 --scrolltext

    # Then ask if they want to modify
    if whiptail --title "Modify Host List?" --yesno "Would you like to modify this list?\n\nSelect 'Yes' to add/remove hosts\nSelect 'No' to proceed with current list" 10 60; then
        modify_host_list
    fi

    log_message "User confirmed final host list"
}

run_deep_scan() {
    log_message "Starting deep scan"

    clear
    echo "Starting comprehensive port and vulnerability scan..."
    echo "This will take a significant amount of time..."

    nmap -sS -sU -p T:1-65535,U:53,161,137,5353 -T3 --max-retries 7 --host-timeout 3600s --script "default,vuln and safe,auth" --script-timeout 300s -Pn -sV -O -iL /root/scans/nmap-${NETWORK_NAME}-live-hosts.txt -oA /root/scans/nmap-${NETWORK_NAME}-deep-scan

    log_message "Deep scan completed"
}

generate_html_report() {
    log_message "Generating HTML report"

    if [[ -f /root/scans/nmap-${NETWORK_NAME}-deep-scan.xml ]]; then
        xsltproc /root/scans/nmap-${NETWORK_NAME}-deep-scan.xml -o /root/scans/nmap-${NETWORK_NAME}-deep-scan.html
    else
        whiptail --title "Error" --msgbox "XML scan results not found. Cannot generate HTML report." 8 50
        exit 1
    fi
}

create_encrypted_report() {
    whiptail --title "Report Encryption" --msgbox "You will now be prompted for an encryption password for the report." 8 60

    clear
    echo "Creating encrypted report archive..."
    echo "You will be prompted for a password:"

    zip -r -e /root/report/nmap-${NETWORK_NAME}-report.zip /root/scans/*

    log_message "Encrypted report created"
}

share_report() {
    local ip=$(ip route get 8.8.8.8 2>/dev/null | awk '{print $7; exit}')

    whiptail --title "Report Sharing" --msgbox "Creating new encrypted report with all scan files.\n\nYou will be prompted for a password to encrypt the report." 8 60

    log_message "Starting report sharing - creating new encrypted archive"

    clear
    echo "Creating new encrypted report archive with all scan files..."
    echo "You will be prompted for a password:"

    # Remove any existing report files
    rm -f /root/report/nmap-*-report.zip

    # Create new encrypted zip with all files from /root/scans
    zip -r -e /root/report/nmap-${NETWORK_NAME}-report.zip /root/scans/*

    log_message "New encrypted report created for sharing"

    whiptail --title "Report Sharing" --msgbox "The report will be shared via webserver at:\nhttp://192.168.99.3:8000\n\nPress Enter to start the web server for 2 minutes." 10 60

    log_message "Starting web server for report sharing"

    clear
    echo "Starting web server at http://192.168.99.3:8000"
    echo "Press Ctrl+C to stop the server"

    cd /root/report
    timeout 120 python3 -m http.server 8000 || true

    log_message "Web server session completed"
}

scan_complete_menu() {
    whiptail --title "Scan Complete" --msgbox "Network security assessment scan is complete!\n\nThe scan results are ready to share." 8 60
}

show_main_menu() {
    local choice=$(whiptail --title "$BACKTITLE" --menu "Welcome to the Network Security Assessment Tool\n\nChoose an option:" 15 70 3 \
        "1" "Start New Assessment" \
        "2" "Share Previous Report" \
        "3" "Exit" 3>&1 1>&2 2>&3)

    case $choice in
        1)
            log_message "User selected: Start New Assessment"
            return 0
            ;;
        2)
            log_message "User selected: Share Previous Report"
            if [[ -d "/root/scans" && "$(ls -A /root/scans 2>/dev/null)" ]]; then
                share_report
                exit 0
            else
                whiptail --title "No Previous Scans" --msgbox "No previous scan data found in /root/scans.\n\nPlease run a new assessment first." 8 60
                show_main_menu
            fi
            ;;
        3)
            log_message "User selected: Exit"
            whiptail --title "Exit" --msgbox "Exiting Network Security Assessment Tool." 8 50
            exit 0
            ;;
        *)
            log_message "User cancelled or invalid selection"
            whiptail --title "Exit" --msgbox "Exiting Network Security Assessment Tool." 8 50
            exit 0
            ;;
    esac
}

main() {
    log_message "Network Security Assessment Tool started"

    show_main_menu

    show_network_info

    # Get network name for file naming
    NETWORK_NAME=$(get_network_name)
    log_message "Network name set to: $NETWORK_NAME"

    warn_about_cleanup

    cleanup_scans

    if get_scan_method; then
        network_range=$(get_network_range)
        run_discovery_scan "$network_range"
    else
        collect_ip_addresses
    fi

    display_and_confirm_hosts

    run_deep_scan

    scan_complete_menu

    generate_html_report

    create_encrypted_report

    share_report

    log_message "Network Security Assessment Tool completed successfully"

    whiptail --title "Complete" --msgbox "Network security assessment completed successfully!" 8 50
}

if [[ $EUID -ne 0 ]]; then
    echo "This script must be run as root"
    exit 1
fi

main "$@"